/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context as Context } from "./../utils/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  animeFavoritedByUser: { // input type
    userUserId: string; // ID!
  }
  createAnime: { // input type
    animeGenre: string; // String!
    animeImageLink: string; // String!
    animeName: string; // String!
    animeReleaseDate: string; // String!
  }
  createAnimeFavorite: { // input type
    animeAnimeId: string; // ID!
    userUserId: string; // ID!
  }
  createUser: { // input type
    userEmail: string; // String!
    userName: string; // String!
    userPassword: string; // String!
  }
  deleteAnimeFavorite: { // input type
    animeAnimeId: string; // ID!
    userUserId: string; // ID!
  }
  deleteAnimeFavoriteById: { // input type
    animeFavoriteId: string; // ID!
  }
  getSessionData: { // input type
    sessionKey: string; // String!
  }
  login: { // input type
    userEmail: string; // String!
    userPassword: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Anime: { // root type
    animeGenre: string; // String!
    animeId: string; // ID!
    animeImageLink: string; // String!
    animeName: string; // String!
    animeReleaseDate: string; // String!
  }
  AnimeFavorite: { // root type
    animeAnimeId: string; // ID!
    animeFavoriteId: string; // ID!
    userUserId: string; // ID!
  }
  Mutation: {};
  Query: {};
  Session: { // root type
    sessionKey: string; // String!
  }
  User: { // root type
    userAdmin: boolean; // Boolean!
    userEmail: string; // String!
    userId: string; // ID!
    userName: string; // String!
    userPassword: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Anime: { // field return type
    animeGenre: string; // String!
    animeId: string; // ID!
    animeImageLink: string; // String!
    animeName: string; // String!
    animeReleaseDate: string; // String!
  }
  AnimeFavorite: { // field return type
    animeAnimeId: string; // ID!
    animeFavoriteId: string; // ID!
    userUserId: string; // ID!
  }
  Mutation: { // field return type
    createAnime: NexusGenRootTypes['Anime'] | null; // Anime
    createAnimeFavorite: NexusGenRootTypes['AnimeFavorite'] | null; // AnimeFavorite
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteAnime: NexusGenRootTypes['Anime'] | null; // Anime
    deleteAnimeFavorite: NexusGenRootTypes['AnimeFavorite'] | null; // AnimeFavorite
    deleteAnimeFavoriteById: NexusGenRootTypes['AnimeFavorite'] | null; // AnimeFavorite
    deleteUser: NexusGenRootTypes['User'] | null; // User
    getSessionData: NexusGenRootTypes['User'] | null; // User
    login: NexusGenRootTypes['Session'] | null; // Session
    updateAnime: NexusGenRootTypes['Anime'] | null; // Anime
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    animeFavoritedByUser: NexusGenRootTypes['AnimeFavorite'][]; // [AnimeFavorite!]!
    animeFavorites: NexusGenRootTypes['AnimeFavorite'][]; // [AnimeFavorite!]!
    animes: NexusGenRootTypes['Anime'][]; // [Anime!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Session: { // field return type
    sessionKey: string; // String!
  }
  User: { // field return type
    userAdmin: boolean; // Boolean!
    userEmail: string; // String!
    userId: string; // ID!
    userName: string; // String!
    userPassword: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Anime: { // field return type name
    animeGenre: 'String'
    animeId: 'ID'
    animeImageLink: 'String'
    animeName: 'String'
    animeReleaseDate: 'String'
  }
  AnimeFavorite: { // field return type name
    animeAnimeId: 'ID'
    animeFavoriteId: 'ID'
    userUserId: 'ID'
  }
  Mutation: { // field return type name
    createAnime: 'Anime'
    createAnimeFavorite: 'AnimeFavorite'
    createUser: 'User'
    deleteAnime: 'Anime'
    deleteAnimeFavorite: 'AnimeFavorite'
    deleteAnimeFavoriteById: 'AnimeFavorite'
    deleteUser: 'User'
    getSessionData: 'User'
    login: 'Session'
    updateAnime: 'Anime'
    updateUser: 'User'
  }
  Query: { // field return type name
    animeFavoritedByUser: 'AnimeFavorite'
    animeFavorites: 'AnimeFavorite'
    animes: 'Anime'
    users: 'User'
  }
  Session: { // field return type name
    sessionKey: 'String'
  }
  User: { // field return type name
    userAdmin: 'Boolean'
    userEmail: 'String'
    userId: 'ID'
    userName: 'String'
    userPassword: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAnime: { // args
      input: NexusGenInputs['createAnime']; // createAnime!
    }
    createAnimeFavorite: { // args
      input: NexusGenInputs['createAnimeFavorite']; // createAnimeFavorite!
    }
    createUser: { // args
      input: NexusGenInputs['createUser']; // createUser!
    }
    deleteAnimeFavorite: { // args
      input: NexusGenInputs['deleteAnimeFavorite']; // deleteAnimeFavorite!
    }
    deleteAnimeFavoriteById: { // args
      input: NexusGenInputs['deleteAnimeFavoriteById']; // deleteAnimeFavoriteById!
    }
    getSessionData: { // args
      input: NexusGenInputs['getSessionData']; // getSessionData!
    }
    login: { // args
      input: NexusGenInputs['login']; // login!
    }
  }
  Query: {
    animeFavoritedByUser: { // args
      input: NexusGenInputs['animeFavoritedByUser']; // animeFavoritedByUser!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}